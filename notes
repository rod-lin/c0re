关于ucore所有lab版本(lab1 - lab8)以及版本过渡的一些笔记

大部分文件名和函数名与ucore里的是一样的。。有一些强迫症范了偏要改名请见谅。

lab1 
    @19082017
        因为这个笔记是lab2才开始的所以这里只能凭印象写一下lab1里面的大致内容
        lab1主要是一个最基本的，可以做启动，打印字符以及支持中断的一个操作系统框架
        没什么大坑毕竟也没有前面的版本过渡的问题
        
        一开始启动是bootasm.S
        bootasm.S这个版本里只有三个工作 -- 设置一个基本的GDT，切换到保护模式，布置栈并调到bootmain(在bootc.c里面)
        没什么毛病就主要一开始A20是什么鬼有点懵逼（似乎要用一个叫8042芯片的键盘控制器？？？（键盘控制器被委以如此重任表示很懵逼））
        然后每次改段寄存器都要ljmp一下不知道为什么（刷新？？） [TODO]
        段描述符的格式比较诡异，据说是要向下兼容的缘故。反正忘了就查维基吧。。
        然后设置了栈指针就跳到c
        
        bootc的功能是读磁盘加载内核
        也没什么毛病大部分就是磁盘接口以及ELF的格式（15-213全忘光了。。）
        
        然后华丽跳转到内核
        
        内核的初始化就开始懵逼了。
        主要一些基本的模块都相互依赖（输入输出(console.c)依赖中断，然后中断和其他东西实现的地方又有很多要输出调试的地方。。）
        于是就一点一点撸最后终于搭出来了。
        
        首先driver里面就是一堆驱动。各种输入输出初始化啥的。。感觉参数端口啥的不查表鬼才记得住。
        clock.c 是时钟驱动，现在是rate generator模式，应该就是隔一段时间发出一个中断
        然后那个时钟芯片（8253）有个很诡异的频率1193182Hz，每次用都要换算一下
        最后设置的那个数字不是中断的间隔而是1秒中断的次数（16-bit整数，ucore里面获得高地位的模和除让我一开始很懵逼//）

        console就是字符输入输出没毛病，就是输入字符里面控制字符做的比较草率还要改一下
        
        pic就是外围设备的终端控制器。像timer，键盘啥的都要enable一下才能关闭屏蔽
        
        然后就是intr中断，里面所有东西基本上就是在初始化IDT，vectors.S是一个很诡异的中断处理函数的列表，并不是正式的中断描述符，
        只是方便trap.c里面初始化用。然后现在是所有中断都会被vectors.S里面的某个函数设置了中断号之后跳到trapentry.S，
        然后trapentry再调到trap.c里面的alltrap做分开处理
        
        最后一个比较大的一块是mem，这里的mem就是基本的一些布局(mmu.h，我把mem_layout合并到了这里)和基本GDT初始化(pmm.c)。
        这一块lab2里改动很大之后再讲。
        
        其他就是辅助函数，以及一个简单的“标准库” libs(我改成了pub)
        没了

lab1 -> lab2
    @19082017
        好多坑，简单记一下
        1. tool里面多了一个boot.ld（链接时候的脚本）, （我觉得是）因为bootasm.S里面多了一个内存探查引导就可能太大了
          （要小于等于512 - 2 = 510 byte）。。
           于是就只能链接的时候简化一下？？ 这个当时调试了很久（WTF命令都一样啊为什么我编译出来的就大一点！！！）
        2. 由于要支持虚拟内存分页机制，tool/kernel.ld和init（多了个entry.S）都有更改。注意要把qemu的内存改大一点
          （好像小于4G还是多少就会崩溃）
        3. 然后console和一些驱动里面地址都有改过（因为内核加载地址改了）

lab2
